
' -------------------------------------------- Questions and TO-DO ---------------------------------------------


'Find out how to randomise id's in spring and have them be alphanumerical'

'Have to think about how we stucture courses. Course is a concrete instance of either Tut, VL or Sem, so there has to
'be a level above. What is level above called, is this a seperate package?

'Should Course and Survey be in seperate Packages?'

'Müssen wir das Jahr abspecihern, damit ein kurs im nächsten jahr wieder unter dem gleichen namen erstellt werden kann
'Weil eigentlich darf es im gleichen Jahr/Sem nicht zweimal das gleiche fach geben...'

' --------------------------------------------------------------------------------------------------------------

@startuml qovaArchitecture 



package Course{





    class Course{
        
        - String name
        - Type type
        - bytes QRCode
        - String optQ1
        - String optQ2
        - String optQ3

        ' + Long UserId?            Die würde dann beim erstellen mitgegeben werden, damit man dann einen kurs immer
        '                           einen besitzer zuweisen kann. Weiß aber nicht wie das mit den schibole login dann 
        '                           in der realität aussieht...
==

        'Constructor'
        + Course(String name, Type type, QRCode qrCode, String optQ1, String optQ2, String optQ3)
        + Getter()       'for all attributes' 
        + Setter()       'for all attributes' 
        + getCourseId()

    }





    class CourseController{
       
        - final CourseManagement courseManagement

==

            'Constructor'
        + CourseController(CourseManagement courseManagement) 
            'GetMapping method'
        + String courseDetails(Model model, Long CourseId)
            'GetMapping method'
        + String createCourse(Model model, CourseForm form)         
            'PostMapping method to verify user input'                            
        + String createCourseValidation(Model model, CourseForm form, BindingResult result)
            'GetMapping method'
        + String editCourse(Model model, CourseForm form, Long CourseId)
            'PostMapping method to validate user input'
        + String editCourseValidation(Model model, CourseForm form, Long id, BindingResult result)
            'GetMapping method. Survey wird allein anhand lehrveranstaltung kreiert. QR code übergibt nur 
            'course.
        +String createSurvey(Model model, Long CourseId, Type type)


    }





    class CourseManagement{
        - final CourseRepository courses

==

        + CourseManagement(CourseRepository courses)
        + add(Course course)
        + createCourse(CourseForm form)
        + deleteCourse(Long CourseId)                             'if needed
        + updateCourse(Long CourseId, CourseForm form)
        + 

    }




    class CourseForm {
    
        - String name
        - Type type
        - bytes QRCode
        - String optQ1
        - String optQ2
        - String optQ3

==
        + String getName()
        + Type getType()
        + bytes getQRCode()
        + String getOptQ1()
        + String getOptQ2()
        + String getOptQ3()

    }





    class Survey {

        'sind hier ints, da dies die bewertungen sind die rauskommen, nicht die fragen selbst. Wir gehen davon aus das 
        '1-5 standatisiert sind über alle fächer
        - int Q1
        - int Q2
        - int Q3
        - int Q4
        - int Q5
        - int optQ1
        - int optQ2
        - int optQ3
        - String textResponse
        - LocalDateTime submissionDateTime
        - Course course          

==
        + survey(attributes)
        + Getter()     'for all attributes'
        + Setter()     'for all attributes'

    }





    class SurveyForm {

        - int Q1
        - int Q2
        - int Q3
        - int Q4
        - int Q5
        - int optQ1
        - int optQ2
        - int optQ3
        - String textResponse
        - localDateTime submissionDateTime

==

        + int getQ1()
        + int getQ2()
        + int getQ3()
        + int getQ4()
        + int getQ5()
        + int getOptQ1()
        + int getOptQ2()
        + int getOptQ3()
        + String getTextResponse()
        + localDateTime getSubmissionDateTime()

    }

    interface CourseRepository {
        'if filtern is necessary, methods are added here' 
    }

    interface SurveyRepository {
        'All findBy methods are added here. Will have to see how they want this filtered
        
        + Stream<Course>
        + Iterable<Evaluation> findByDateTime()


    }

    enum Type {
        LECTURE
        TUTORIAL
        SEMINAR
    }


    'Relations'
    Type --* Course


}


'User Package. Need to think about security and so forth
package Users{
    class User{

    }

    class UserController{

    }

    class UserManagement{

    }

    class UserForm{

    }

    class UserRepository{

    }
}

@enduml