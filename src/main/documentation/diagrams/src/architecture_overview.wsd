
' -------------------------------------------- Questions and TO-DO ---------------------------------------------


'Find out how to randomise id's in spring and have them be alphanumerical'

'Have to think about how we stucture courses. Course is a concrete instance of either Tut, VL or Sem, so there has to
'be a level above. What is level above called, is this a seperate package?

'Should Course and Survey be in seperate Packages?'

'Müssen wir das Jahr abspecihern, damit ein kurs im nächsten jahr wieder unter dem gleichen namen erstellt werden kann
'Weil eigentlich darf es im gleichen Jahr/Sem nicht zweimal das gleiche fach geben...'

' --------------------------------------------------------------------------------------------------------------

@startuml qovaArchitecture 



package course{




    'Finalised'
    class course{
        
        - String name
        - CourseType type                       'LECTURE, TUTORIAL, SEMINAR'
        - bytes QRCode
        - survey Survey
        - int classTotal                        'Wie viele von dieser LV gibt es. Studenten müssen dann angeben in welchem sie waren'
        - int semester                          'Welches Semester belegt dieses fach'
        - CourseFaculty courseFaculty           'Welche Fakultät'


        ' + Long UserId?                    Die würde dann beim erstellen mitgegeben werden, damit man dann einen kurs immer
        '                                   einen besitzer zuweisen kann. Weiß aber nicht wie das mit den schibole login dann 
        '                                   in der realität aussieht...
==

        'Constructor'
        + Course(String name, courseType type, QRCode qrCode, )
        + Getter()       'for all attributes' 
        + Setter()       'for all attributes' 
        + getCourseId()

    }




    'In Progress'
    class courseController{
       
        - final CourseManagement courseManagement

==

            'Constructor'
        + CourseController(CourseManagement courseManagement) 
            'GetMapping method'
        + String courseDetails(Model model, Long CourseId)
            'GetMapping method'
        + String createCourse(Model model, CourseForm form)         
            'PostMapping method to verify user input'                            
        + String createCourseValidation(Model model, CourseForm form, BindingResult result)
            'GetMapping method'
        + String editCourse(Model model, CourseForm form, Long CourseId)
            'PostMapping method to validate user input'
        + String editCourseValidation(Model model, CourseForm form, Long id, BindingResult result)
            'GetMapping method. Survey wird allein anhand lehrveranstaltung kreiert. QR code übergibt nur 
            'course.
        +String createSurvey(Model model, Long CourseId, Type type)


    }




    'In Progress'
    class courseManagement{
        - final CourseRepository courses

==

        + CourseManagement()
        + add(Course course)
        + createCourse(CourseForm form)
        + deleteCourse(Long CourseId)                             'if needed
        + updateCourse(Long CourseId, CourseForm form)
        + 

    }




    class courseForm {
    
        - String name
        - Type type
        - bytes QRCode
        -

==
        + String getName()
        + Type getType()
        + bytes getQRCode()

    }





    class survey {
        - LocalDateTime submissionDateTime     
        - 

==
        + survey(attributes)
        + Getter()     'for all attributes'
        + Setter()     'for all attributes'

    }





    class surveyForm {
        'todo'
        - localDateTime submissionDateTime

==

        'todo'
        + localDateTime getSubmissionDateTime()

    }

    interface courseRepository {
        'if filtern is necessary, methods are added here' 
    }

    interface surveyRepository {
        'All findBy methods are added here. Will have to see how they want this filtered
        
        + Stream<Course>
        + Iterable<Evaluation> findByDateTime()


    }

    enum CourseType {
        LECTURE
        TUTORIAL
        SEMINAR
    }

    enum CourseFaculty {
        MEDICINE
        COMPUTER_SCIENCE
        'usw.'
    }



    enum SurveyQuestionType {
        MULTIPLE_CHOICE
        TEXT_RESPONSE
        BINARY
        DROP_DOWN
    }

    'Relations'
    courseType --* course


}


'User Package. Need to think about security and so forth
package Users{
    class User{

    }

    class UserController{

    }

    class UserManagement{

    }

    class UserForm{

    }

    class UserRepository{

    }
}

@enduml